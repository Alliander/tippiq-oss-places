import nock from 'nock';

/**
 * Get the location by address type
 * @function mockGetLocationByAddressType
 * @param {string} baseUrl The base url to use in the tests
 * @returns {Promise} Find by address type
 */
function mockGetLocationByAddressType(baseUrl) {
  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'CityAddress',
        city: 'Amsterdam',
        municipality: 'Amsterdam',
        province: 'Noord-Holland',
      },
    })
    .reply(() =>
      [200, {
        type: 'CityAddress',
        geometry: '010300002040710000010000003000000002401AF202B9FE40B3456F3A151A1D41E0EF9A7FF4AAFE4002316B28A11A1D414CB88E54B977FE4071FBF9E56E321D419C1B1DC5F855FE4055E2A90C13421D4136DB9AF282B4FD4017EFE0EE34661D4100AB9F91D33EFD406A698D61CC661D41A06078F2B203FD4046B740EE4C661D4193DE9B81C085FC405C9A3E19B36F1D4192BB1BF3C268FC40311405EE1C6E1D4109FFEF973741FC40A2456C457B741D419F18F4BC680FFC400C8BEC8A0A7D1D419E6EA8CCD20CFC408B16917F7C7D1D41E1F2119E4E0AFC4090A22D18047E1D41EF139EF1C2C2FB4021F194EED4901D41C8B86CF2726EFB4018861FEE88A01D416A681BF27265FB40C56846EEA8BC1D413061ECEF0267FB4066D2F8ED00CF1D41709B39F08231FB407D089FEEB8EE1D4164194E823004FB4043AB388DE7FB1D4190AA3FBC8E11FB406092C1542C121E41F45C4EEF026DFB40C8E8C2EE80101E41A0FA67F042A8FB4059F529EE6C1A1E41F7A7F0912B0AFC4034C0AE0E2B151E41F1B7ACEFF284FC4086B2ABEE2C0E1E41900F53E8FB10FD40AFA0A6B5041A1E417285D0EF522BFD406A0018EFD0221E41A6D12CEF728DFD40CA23D8EE48181E418936D2763CD5FD409B24392666121E41D0E952EF9291FE40796F73EEF8121E41F653C60B4ED4FE40613AC5FE66151E419B8FA6EFA21AFF40E2EB7EEF8C1A1E4123547AEF6257FF400E958FEE58191E4169C98FA183C5FF40CD3989CFDC0D1E41B4422179191D00412D0E00EF54051E41CE03BC55BB3800410231F3B3F2061E413CEBD436B1190041B3072B3377F61D4155A5DB2F4EF5FF4063DE62B2FBE51D41E06B83D406A4FF40DAFFD27EFCBC1D4150DE7E6E42B0FF40385B303CFB9D1D413A4290952BA2FF40C9BE2D5C57911D419BFE4B5245ADFF40ECE9A521FD541D413C5E7DAE51B3FF403643FFAD34541D41D8F0BAF262BAFF4058A4EAEEA4441D4166CDB7F37250FF40C89D41EE34351D41C5271FF2E245FF4049333EEF742E1D4197BEB46EDAD1FE4096E41E4D321F1D4151445FF462BDFE40FA4CA9EE401A1D4102401AF202B9FE40B3456F3A151A1D41',
        cityName: 'Amsterdam',
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'ZipcodeAddress',
        zipcode: {
          digits: '1011',
          chars: 'AB',
        },
      },
    })
    .reply(() =>
      [200, {
        type: 'ZipcodeAddress',
        geometry: '010300002040710000010000000600000030B28DF212DAFD40674FB2EEDCC61D4152EE3DF212D4FD40355980EE14C71D41C0130EF092D4FD40AA8248EE2CC71D41211B2BBCDED6FD40A2B330000EC71D41EC1E19F022D9FD4006FE23EEECC61D4130B28DF212DAFD40674FB2EEDCC61D41',
        zipcodeLetters: 'AB',
        zipcodeDigits: '1011',
        cityName: 'Amsterdam',
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .get('')
    .reply(() =>
      [200, {
        location: {
          cityName: 'Utrecht',
          municipalityName: 'Utrecht',
          provinceName: 'Utrecht',
          geometry: {
            type: 'Polygon',
            coordinates: [[[5.05880567138105, 52.037246493938], [5.04666363393642, 52.043751383539], [5.03451806891639, 52.0502550111673], [5.03440322135712, 52.0503164939463], [5.0223168550096, 52.0568631523191], [5.0202910113433, 52.0579601539511], [5.02031170134332, 52.0579860639511], [5.04117351136564, 52.0888935939701], [5.03852693700499, 52.0922431020694], [5.0279118613528, 52.0992486039765], [5.03212360977467, 52.1061020632948], [5.02588656135159, 52.1176780839879], [5.02588656135159, 52.1176780839879], [5.02631905135213, 52.1199374039892], [5.04180118136792, 52.1258770039928], [5.04707979137337, 52.1292213939948], [5.06760644139376, 52.124857523992], [5.08323437140973, 52.131615833996], [5.08709559141376, 52.1354010839983], [5.10159548758715, 52.1310804281305], [5.11609258042234, 52.1267579844032], [5.12595625145227, 52.1246833539914], [5.12611199145242, 52.1246163239914], [5.13706524146317, 52.119254813988], [5.14679208147272, 52.1143482039849], [5.15558834661093, 52.1068867173726], [5.17450295149955, 52.0917384439707], [5.17810752150317, 52.0917703639708], [5.18754078151253, 52.0893851739692], [5.1900494515149, 52.0860219939671], [5.19194664151648, 52.0781319039622], [5.18740518151188, 52.0771899739617], [5.15755671148142, 52.0654663039547], [5.15170853394969, 52.0594258685289], [5.15008285147358, 52.0574884839499], [5.13550061145893, 52.0571790439498], [5.10827449311792, 52.052229867509], [5.10622824142928, 52.0511497539463], [5.10622824142928, 52.0511497539463], [5.0634934013859, 52.04056333394], [5.05908246649347, 52.0374423613462], [5.05880567138105, 52.037246493938]]], // eslint-disable-line max-len
          },
          type: 'CityAddress',
        },
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'HouseAddress',
        zipcode: {
          digits: '1011',
          chars: 'AB',
        },
        house: {
          number: '105',
          suffix: 'H',
        },
      },
    })
    .reply(() =>
      [200, {
        type: 'HouseAddress',
        geometry: '0101000020407100004C1E36F212D4FD4056AEABEE14C71D41',
        nr: '105',
        addition: 'H',
        streetName: 'De Ruijterkade',
        zipcodeLetters: 'AB',
        zipcodeDigits: '1011',
        cityName: 'Amsterdam',
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'ZipcodeAddress',
        zipcode: {
          digits: '1011',
        },
      },
    })
    .reply(() =>
      [200, {
        type: 'ZipcodeAddress',
        geometry
        zipcodeDigits: '1011',
        cityName: 'Amsterdam',
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'StreetAddress',
        street: 'De Ruijterkade',
        city: 'Amsterdam',
        province: 'Noord-Holland',
      },
    })
    .reply(() =>
      [200, {
        type: 'StreetAddress',
        geometry: '010300002040710000010000000C00000086AE21F1C2DEFD40BBD7DDEEE8C51D414C1E36F212D4FD4056AEABEE14C71D4134479B449ECCFD40FB9AC10417C81D41A86CF5F1B2ABFD40F46B57EEF0CC1D41643EF6EF92AAFD408F697AEE30CD1D41503173F0F2A2FD402E2BE9EE88CF1D41027C8B5F87A4FD40F3AF4CD648D01D41F4CAFCB5C5A6FD40CC20774F29D01D415C45F95300AEFD4051E6746B18CF1D41E631F8F0F2E5FD40B7EB96EEA0C61D41EC9712F232E6FD40FD4AD0EE28C61D4186AE21F1C2DEFD40BBD7DDEEE8C51D41',
        streetName: 'De Ruijterkade',
        cityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'CityAddress',
        city: 'Amsterdam',
        municipality: 'Amsterdam',
        province: 'Noord-Holland',
      },
    })
    .reply(() =>
      [200, {
        type: 'CityAddress',
        geometry: '0103000020407100000100000030000000CE3512F202B9FE40B4C69A3A151A1D413DE9927FF4AAFE40DFB19628A11A1D41A1BE8654B977FE40117625E66E321D418A2A15C5F855FE403C59D50C13421D41121393F282B4FD40CC5C0CEF34661D4113019891D33EFD4015D7B861CC661D4157C570F2B203FD40FD246CEE4C661D419E639481C085FC40D7056A19B36F1D41984714F3C268FC40128030EE1C6E1D411495E8973741FC40C9AF97457B741D4150BBECBC680FFC4011F3178B0A7D1D41F211A1CCD20CFC40917EBC7F7C7D1D41DC960A9E4E0AFC406B0A5918047E1D4116CA96F1C2C2FB401B54C0EED4901D41528465F2726EFB4036E54AEE88A01D41493614F27265FB40A1C071EEA8BC1D41B02EE5EF0267FB40B52524EE00CF1D418E7632F08231FB405B53CAEEB8EE1D41FEFF46823004FB40F0F2638DE7FB1D41D48D38BC8E11FB4062D4EC542C121E410A2947EF026DFB40962BEEEE80101E41B0B760F042A8FB40723555EE6C1A1E417553E9912B0AFC403401DA0E2B151E41023DA5EFF284FC40AFF5D6EE2C0E1E4140724BE8FB10FD40E4E0D1B5041A1E415AE0C8EF522BFD40283E43EFD0221E41A51325EF728DFD40406403EF48181E410E68CA763CD5FD402766642666121E41D8E94AEF9291FE4080B19EEEF8121E41D042BE0B4ED4FE409F7BF0FE66151E41D66C9EEFA21AFF40BF2BAAEF8C1A1E41FB2172EF6257FF403FD5BAEE58191E41867B87A183C5FF40F57CB4CFDC0D1E41DE0C1D79191D00417F532BEF54051E41F7C6B755BB38004111761EB4F2061E414AB6D036B1190041E750563377F61D413A4BD32F4EF5FF40BD2B8EB2FBE51D4136267BD406A4FF407657FE7EFCBC1D418995766E42B0FF40D3BA5B3CFB9D1D4100FD87952BA2FF40C821595C57911D414FAF435245ADFF40F05CD121FD541D41961475AE51B3FF405DB52AAE34541D416EA5B2F262BAFF40B91A16EFA4441D41CF9CAFF37250FF40E4176DEE34351D41DAF916F2E245FF40F1AE69EF742E1D416DAEAC6EDAD1FE401C644A4D321F1D41F63857F462BDFE4008CED4EE401A1D41CE3512F202B9FE40B4C69A3A151A1D41',
        cityName: 'Amsterdam',
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'MunicipalityAddress',
        municipality: 'Amsterdam',
        province: 'Noord-Holland',
      },
    })
    .reply(() =>
      [200, {
        type: 'MunicipalityAddress',
        geometry
        municipalityName: 'Amsterdam',
        provinceName: 'Noord-Holland',
      }]
    );

  nock(baseUrl)
    .persist() // catch all subsequent requests
    .post('/api/addresses/find-by-address-type', {
      address: {
        type: 'ProvinceAddress',
        province: 'Noord-Holland',
      },
    })
    .reply(() =>
      [200, {
        type: 'ProvinceAddress',
        geometry: '010300002040710000010000005700000092ABE11B0813004189780A3C75561C4185374F1E27F1FF401621A803A9751C41DB41E0F4C2C2FF40EB7744EF2C971C4101B689A2E98FFC4097C7B82D39C91C4185BC7FC8C19AFB404299BD50FCB51C4104D4F2DA64F4FA404CB4A6D4EB9F1C4194C6AA5A459AF9401FA835BBA6BE1C4132FFB2FB1CDFF840C2A7181BE6AE1C4168CB6FBF4429F840D1FDA138B0B41C411D3A2A988623F840F42DB0A4FCB41C41A258015C831CF8408C04089B67B51C4184240CC81B1AF840D41A50488CB51C413EA5DE730511F840A10656F61BB61C41809C2FA3080AF840B5ECA8728DB61C41B7561D99C207F84065479E5FB2B61C417A80B9909E04F8403D7FBC00F0B61C41EDE139F63903F840522065AD11B71C414C69271395FDF740CCD683F42EB81C41E4482FEF23EFF74053DC1323F0BC1C415305A2F109E6F7404D2EB19922C11C41E3CB0FAE8236F840AEBB2FCC4B051D4112F775F23205F8401EC974ED48571D41068A3F929240F7404705AF93339D1D41068A3F929240F7404705AF93339D1D41A416DB1326A6F7408E33BA2099DA1D41ACE71CEF6202F840DD33E4EDFC101E41E49C7F331112F8407A65F2C4435A1E4190546C3D4993F840ADE39263BF9A1E41DDAAFA7879BFF8407FA567DF6FC81E418644CE137AF6F84061478C379F131F4173010FF09226F94017796F183D6A1F4145E6FEB4E348F940F4E8338519AE1F41B7D3F19D126CF940F3FD1F8C33F01F4127FDA0766183F940394B55339B152041702383B1D5C5F9408FE993F7ED39204193788FFD382AFA40FB97D3DCBC582041698E52DED778FA408EFE609BF7782041DC2C3498B0C4FA40B1AFE4E562A4204140AB583EC9CCFA404FB10C2095C42041680F409CDAEAFA400305AAED7AD72041EA1A797579E4FA4066A962D81F112141151507A716CEFA40A0A0AE5D3323214154E2216BD0FCFA406C83A749833921415429CE92E632FB4019CC41F7EB47214100AED2C66F6FFB4043145B02825521414283D971CC78FB407558C2728D57214173C326198E53FC401191A93D246C21414C322A386597FC406AC2F838FA8D21411464CDF7E619FD40D0D770EB6C9E2141AAD3918ECA28FD40EEFFE363F69E21415E82712CB22CFD40ED5FA5AC929E21413A253F25815FFD4043803AE9A49821416F2A30FBEF6FFD40228565615296214100666A14A4C2FD4001E24344027E21410818978A72D3FD403935BAA98161214128203520EECEFD40DA04D9DA4746214128203520EECEFD40DA04D9DA47462141A7637205ABA30041ACB536F0E5E42041A7637205ABA30041ACB536F0E5E42041A7637205ABA30041ACB536F0E5E42041E5E33B75E3860041AE341677A3DE20419F24BE204A7900418A0497206C93204105CD28CA54A500419D093B99E47D20419A92DB4BABA40041582693FE056E2041805649ED6E8B01413714C686D1282041FCC8726597E00141B4A1E3E592242041C158D3A9450E02413084C3015E1F2041B45CDD5F12340241C1AB217208022041CE323296FC080241EA6091330DE61F41867E8E76C1A90141C3DDDDEFE8AC1F41E68F4B330D9C0141FC656EFA6AA41F41FA0FBB76295E0141E4930AF0008B1F41E023302A73DC0041BA3BCE4C68541E41E023302A73DC0041BA3BCE4C68541E41E023302A73DC0041BA3BCE4C68541E41E8374C3A41C801411024225C69521D41D9111B2729370241E8BE8D9346411D41D9111B2729370241E8BE8D9346411D41A1E3036E55370241112F214134411D41CEC95BF3B7D90141E6A1382A3F0F1D41A85ACF8207A201410EAB486C8ACE1C4106B81F70BB6A01412FD1426C62911C4184D114D36B6301412ED0AA64AE861C41D1D7EB61632D01413777CD79076B1C4158CE1B1483BE0041795AE4BBA96F1C41AF0611F2DF20004175A378A580581C4192ABE11B0813004189780A3C75561C41',
        provinceName: 'Noord-Holland',
      }]
    );
}

/**
 * Get the location by address type
 * @function mockGetLocationByAddressType
 * @param {string} baseUrl The base url to use in the tests
 * @returns {Promise} Find by address type
 */
function mockSearch(baseUrl) {
  nock(baseUrl)
    .persist() // catch all subsequent requests
    .get('/api/addresses/search')
    .query({ query: 'ams', max: 8, timeout: 1000 })
    .reply(() =>
      [{
        provinceName: 'Noord-Holland',
        streetName: 'De Ruijterkade',
        type: 'HouseAddress',
        zipcodeLetters: 'AB',
        cityName: 'Amsterdam',
        geometry: {
          type: 'Point',
          coordinates: [
            4.90516949124279,
            52.3777817841449,
          ],
        },
        nr: '105',
        addition: '1',
        letter: '',
        zipcodeDigits: '1011',
        municipalityName: 'Amsterdam',
      }]
    );
  nock(baseUrl)
    .persist() // catch all subsequent requests
    .get('/api/addresses/search')
    .query({ query: 'slow', max: 8, timeout: 1000 })
    .delay(1100)
    .reply(() =>
      [{
        provinceName: 'Noord-Holland',
        streetName: 'De Ruijterkade',
        type: 'HouseAddress',
        zipcodeLetters: 'AB',
        cityName: 'Amsterdam',
        geometry: {
          type: 'Point',
          coordinates: [
            4.90516949124279,
            52.3777817841449,
          ],
        },
        nr: '105',
        addition: '1',
        letter: '',
        zipcodeDigits: '1011',
        municipalityName: 'Amsterdam',
      }]
    );
}

/**
 * Interceptor for mock services
 * @param {string} baseUrl The base url
 * @returns {object} Mock object
 */
export default function intercept(baseUrl) {
  mockGetLocationByAddressType(baseUrl);
  mockSearch(baseUrl);
}
